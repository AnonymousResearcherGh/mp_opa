template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> histogram(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> A_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> B_0,
    std::uint32_t _MPC_PLAINTEXT_N_0,
    std::uint32_t _MPC_PLAINTEXT_num_bins_0,
    std::vector<std::uint32_t> _MPC_PLAINTEXT_result_0
) {
    // Shared variable declarations
    encrypto::motion::ShareWrapper _1_3;
    encrypto::motion::SecureUnsignedInteger N_0;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger j_1;
    encrypto::motion::SecureUnsignedInteger num_bins_0;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_0;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_1((_MPC_PLAINTEXT_num_bins_0));
    std::vector<encrypto::motion::SecureUnsignedInteger> result_2((_MPC_PLAINTEXT_num_bins_0));
    std::vector<encrypto::motion::SecureUnsignedInteger> result_3((_MPC_PLAINTEXT_num_bins_0));
    encrypto::motion::SecureUnsignedInteger val_3;
    encrypto::motion::SecureUnsignedInteger val_4;
    encrypto::motion::SecureUnsignedInteger val_5;

    // Plaintext variable declarations
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_j_1;

    // Constant initializations


    // Plaintext parameter assignments
    N_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_N_0), 0);
    num_bins_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_num_bins_0), 0);
    result_0.clear();
    std::transform(_MPC_PLAINTEXT_result_0.begin(), _MPC_PLAINTEXT_result_0.end(), std::back_inserter(result_0), [&](const auto &val) { return party->In<Protocol>(encrypto::motion::ToInput(val), 0); });

    // Function body

    // Initialize loop counter
    _MPC_PLAINTEXT_i_1 = std::uint32_t(0);
    // Initialize phi values
    result_1 = result_0;
    for (; _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_num_bins_0; _MPC_PLAINTEXT_i_1++) {
        // Update phi values
        if (_MPC_PLAINTEXT_i_1 != std::uint32_t(0)) {
            result_1 = result_2;
        }


        // Initialize loop counter
        _MPC_PLAINTEXT_j_1 = std::uint32_t(0);
        // Initialize phi values
        result_2 = result_1;
        for (; _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_N_0; _MPC_PLAINTEXT_j_1++) {
            // Update phi values
            if (_MPC_PLAINTEXT_j_1 != std::uint32_t(0)) {
                result_2 = result_3;
            }

            i_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_i_1), 0);
            _1_3 = (to_share_wrapper(A_0[_MPC_PLAINTEXT_j_1]) == to_share_wrapper(i_1));
            val_4 = result_2[_MPC_PLAINTEXT_i_1];
            val_3 = (result_2[_MPC_PLAINTEXT_i_1] + B_0[_MPC_PLAINTEXT_j_1]);
            val_5 = _1_3.Mux(val_3.Get(), val_4.Get());
            result_2[_MPC_PLAINTEXT_i_1] = val_5;
            result_3 = result_2;

        }


    }

    return result_1;

}
