template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> cryptonets_max_pooling(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> vals_0,
    std::uint32_t _MPC_PLAINTEXT_cols_0,
    std::uint32_t _MPC_PLAINTEXT_rows_0,
    std::uint32_t _MPC_PLAINTEXT_cols_res_0,
    std::uint32_t _MPC_PLAINTEXT_rows_res_0,
    std::vector<std::uint32_t> _MPC_PLAINTEXT_OUTPUT_res_0
) {
    // Shared variable declarations
    encrypto::motion::ShareWrapper _1_3;
    encrypto::motion::ShareWrapper _2_3;
    encrypto::motion::ShareWrapper _3_3;
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_0;
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_1((_MPC_PLAINTEXT_rows_res_0) * (_MPC_PLAINTEXT_cols_res_0));
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_2((_MPC_PLAINTEXT_rows_res_0) * (_MPC_PLAINTEXT_cols_res_0));
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_3((_MPC_PLAINTEXT_rows_res_0) * (_MPC_PLAINTEXT_cols_res_0));
    encrypto::motion::SecureUnsignedInteger cols_0;
    encrypto::motion::SecureUnsignedInteger cols_res_0;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger j_1;
    encrypto::motion::SecureUnsignedInteger max_3;
    encrypto::motion::SecureUnsignedInteger max_4;
    encrypto::motion::SecureUnsignedInteger max_5;
    encrypto::motion::SecureUnsignedInteger max_6;
    encrypto::motion::SecureUnsignedInteger max_7;
    encrypto::motion::SecureUnsignedInteger max_8;
    encrypto::motion::SecureUnsignedInteger max_9;
    encrypto::motion::SecureUnsignedInteger rows_0;
    encrypto::motion::SecureUnsignedInteger rows_res_0;

    // Plaintext variable declarations
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_j_1;

    // Constant initializations


    // Plaintext parameter assignments
    OUTPUT_res_0.clear();
    std::transform(_MPC_PLAINTEXT_OUTPUT_res_0.begin(), _MPC_PLAINTEXT_OUTPUT_res_0.end(), std::back_inserter(OUTPUT_res_0), [&](const auto &val) { return party->In<Protocol>(encrypto::motion::ToInput(val), 0); });
    cols_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_cols_0), 0);
    cols_res_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_cols_res_0), 0);
    rows_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_rows_0), 0);
    rows_res_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_rows_res_0), 0);

    // Function body

    // Initialize loop counter
    _MPC_PLAINTEXT_i_1 = std::uint32_t(0);
    // Initialize phi values
    OUTPUT_res_1 = OUTPUT_res_0;
    for (; _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_rows_res_0; _MPC_PLAINTEXT_i_1++) {
        // Update phi values
        if (_MPC_PLAINTEXT_i_1 != std::uint32_t(0)) {
            OUTPUT_res_1 = OUTPUT_res_2;
        }


        // Initialize loop counter
        _MPC_PLAINTEXT_j_1 = std::uint32_t(0);
        // Initialize phi values
        OUTPUT_res_2 = OUTPUT_res_1;
        for (; _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_cols_res_0; _MPC_PLAINTEXT_j_1++) {
            // Update phi values
            if (_MPC_PLAINTEXT_j_1 != std::uint32_t(0)) {
                OUTPUT_res_2 = OUTPUT_res_3;
            }

            max_3 = vals_0[(((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2)))];
            _1_3 = (vals_0[((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2))) + std::uint32_t(1))] > max_3);
            max_4 = vals_0[((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2))) + std::uint32_t(1))];
            max_5 = _1_3.Mux(max_4.Get(), max_3.Get());
            _2_3 = (vals_0[((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2)))] > max_5);
            max_6 = vals_0[((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2)))];
            max_7 = _2_3.Mux(max_6.Get(), max_5.Get());
            _3_3 = (vals_0[(((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2))) + std::uint32_t(1))] > max_7);
            max_8 = vals_0[(((((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(2))) + std::uint32_t(1))];
            max_9 = _3_3.Mux(max_8.Get(), max_7.Get());
            OUTPUT_res_2[((_MPC_PLAINTEXT_i_1 * _MPC_PLAINTEXT_cols_res_0) + _MPC_PLAINTEXT_j_1)] = max_9;
            OUTPUT_res_3 = OUTPUT_res_2;

        }


    }

    return OUTPUT_res_1;

}
