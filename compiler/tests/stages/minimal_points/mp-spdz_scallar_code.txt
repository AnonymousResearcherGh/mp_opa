def minimal_points(X_coords_0, Y_coords_0, N_0, result_X_0, result_Y_0):
    # Shared array declarations
    result_X_1 = [None] * (N_0)
    result_X_2 = [None] * (N_0)
    result_Y_1 = [None] * (N_0)
    result_Y_2 = [None] * (N_0)
    # Function body
    for i_1 in range(0, N_0):
        # Set ϕ value
        if i_1 == 0:
            result_X_1 = result_X_0
        else:
            result_X_1 = result_X_2
        # Set ϕ value
        if i_1 == 0:
            result_Y_1 = result_Y_0
        else:
            result_Y_1 = result_Y_2
        bx_2 = _v.sbool(False)
        for j_1 in range(0, N_0):
            # Set ϕ value
            if j_1 == 0:
                bx_3 = bx_2
            else:
                bx_3 = bx_4
            _3_3 = ((X_coords_0[j_1]) < (X_coords_0[i_1]))
            _4_3 = ((Y_coords_0[j_1]) < (Y_coords_0[i_1]))
            _5_3 = _3_3.bit_and(_4_3)
            bx_4 = OR(bx_3, _5_3)
        # Loop exit ϕ values
        bx_3 = bx_4
        val_X_2 = (result_X_1[i_1])
        val_Y_2 = (result_Y_1[i_1])
        _6_2 = (bx_3.bit_not())
        val_X_3 = (X_coords_0[i_1])
        val_Y_3 = (Y_coords_0[i_1])
        val_X_4 = _6_2.if_else(val_X_3, val_X_2)
        val_Y_4 = _6_2.if_else(val_Y_3, val_Y_2)
        result_X_1[i_1] = val_X_4; result_X_2 = result_X_1
        result_Y_1[i_1] = val_Y_4; result_Y_2 = result_Y_1
    # Loop exit ϕ values
    result_X_1 = result_X_2
    result_Y_1 = result_Y_2
    _7_1 = (result_X_1,result_Y_1,)
    return _7_1
