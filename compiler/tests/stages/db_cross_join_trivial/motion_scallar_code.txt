template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> db_cross_join_trivial(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> A_0,
    std::uint32_t _MPC_PLAINTEXT_Len_A_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> B_0,
    std::uint32_t _MPC_PLAINTEXT_Len_B_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> res_0
) {
    // Shared variable declarations
    encrypto::motion::ShareWrapper _1_4;
    encrypto::motion::ShareWrapper _2_4;
    encrypto::motion::ShareWrapper _3_4;
    encrypto::motion::ShareWrapper _4_4;
    encrypto::motion::SecureUnsignedInteger Len_A_0;
    encrypto::motion::SecureUnsignedInteger Len_B_0;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger j_1;
    encrypto::motion::SecureUnsignedInteger k_1;
    std::vector<encrypto::motion::SecureUnsignedInteger> res_1((_MPC_PLAINTEXT_Len_A_0) * (_MPC_PLAINTEXT_Len_B_0) * (std::uint32_t(3)));
    std::vector<encrypto::motion::SecureUnsignedInteger> res_2((_MPC_PLAINTEXT_Len_A_0) * (_MPC_PLAINTEXT_Len_B_0) * (std::uint32_t(3)));
    std::vector<encrypto::motion::SecureUnsignedInteger> res_3((_MPC_PLAINTEXT_Len_A_0) * (_MPC_PLAINTEXT_Len_B_0) * (std::uint32_t(3)));
    std::vector<encrypto::motion::SecureUnsignedInteger> res_4((_MPC_PLAINTEXT_Len_A_0) * (_MPC_PLAINTEXT_Len_B_0) * (std::uint32_t(3)));
    encrypto::motion::SecureUnsignedInteger v_10;
    encrypto::motion::SecureUnsignedInteger v_11;
    encrypto::motion::SecureUnsignedInteger v_4;
    encrypto::motion::SecureUnsignedInteger v_5;
    encrypto::motion::SecureUnsignedInteger v_6;
    encrypto::motion::SecureUnsignedInteger v_7;
    encrypto::motion::SecureUnsignedInteger v_8;
    encrypto::motion::SecureUnsignedInteger v_9;

    // Plaintext variable declarations
    bool _MPC_PLAINTEXT__2_4;
    bool _MPC_PLAINTEXT__3_4;
    bool _MPC_PLAINTEXT__4_4;
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_j_1;
    std::uint32_t _MPC_PLAINTEXT_k_1;
    std::uint32_t _MPC_PLAINTEXT_v_4;

    // Constant initializations
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_0 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(0)), 0);
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_1 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(1)), 0);
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_2 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(2)), 0);
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_3 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(3)), 0);

    // Plaintext parameter assignments
    Len_A_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_Len_A_0), 0);
    Len_B_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_Len_B_0), 0);

    // Function body

    // Initialize loop counter
    _MPC_PLAINTEXT_i_1 = std::uint32_t(0);
    // Initialize phi values
    res_1 = res_0;
    for (; _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_Len_A_0; _MPC_PLAINTEXT_i_1++) {
        // Update phi values
        if (_MPC_PLAINTEXT_i_1 != std::uint32_t(0)) {
            res_1 = res_2;
        }


        // Initialize loop counter
        _MPC_PLAINTEXT_j_1 = std::uint32_t(0);
        // Initialize phi values
        res_2 = res_1;
        for (; _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_Len_B_0; _MPC_PLAINTEXT_j_1++) {
            // Update phi values
            if (_MPC_PLAINTEXT_j_1 != std::uint32_t(0)) {
                res_2 = res_3;
            }


            // Initialize loop counter
            _MPC_PLAINTEXT_k_1 = std::uint32_t(0);
            // Initialize phi values
            res_3 = res_2;
            for (; _MPC_PLAINTEXT_k_1 < std::uint32_t(3); _MPC_PLAINTEXT_k_1++) {
                // Update phi values
                if (_MPC_PLAINTEXT_k_1 != std::uint32_t(0)) {
                    res_3 = res_4;
                }

                v_4 = _MPC_CONSTANT_0;
                _MPC_PLAINTEXT_v_4 = std::uint32_t(0);
                _1_4 = (to_share_wrapper(A_0[(_MPC_PLAINTEXT_i_1 * std::uint32_t(2))]) == to_share_wrapper(B_0[(_MPC_PLAINTEXT_j_1 * std::uint32_t(2))]));
                k_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_k_1), 0);
                _2_4 = (to_share_wrapper(k_1) == to_share_wrapper(_MPC_CONSTANT_0));
                _MPC_PLAINTEXT__2_4 = (_MPC_PLAINTEXT_k_1 == std::uint32_t(0));
                v_5 = A_0[(_MPC_PLAINTEXT_i_1 * std::uint32_t(2))];
                v_6 = _2_4.Mux(v_5.Get(), v_4.Get());
                k_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_k_1), 0);
                _3_4 = (to_share_wrapper(k_1) == to_share_wrapper(_MPC_CONSTANT_1));
                _MPC_PLAINTEXT__3_4 = (_MPC_PLAINTEXT_k_1 == std::uint32_t(1));
                v_7 = A_0[((_MPC_PLAINTEXT_i_1 * std::uint32_t(2)) + std::uint32_t(1))];
                v_8 = _3_4.Mux(v_7.Get(), v_6.Get());
                k_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_k_1), 0);
                _4_4 = (to_share_wrapper(k_1) == to_share_wrapper(_MPC_CONSTANT_2));
                _MPC_PLAINTEXT__4_4 = (_MPC_PLAINTEXT_k_1 == std::uint32_t(2));
                v_9 = B_0[((_MPC_PLAINTEXT_j_1 * std::uint32_t(2)) + std::uint32_t(1))];
                v_10 = _4_4.Mux(v_9.Get(), v_8.Get());
                v_11 = _1_4.Mux(v_10.Get(), v_4.Get());
                res_3[((((_MPC_PLAINTEXT_i_1 * _MPC_PLAINTEXT_Len_B_0) * std::uint32_t(3)) + (_MPC_PLAINTEXT_j_1 * std::uint32_t(3))) + _MPC_PLAINTEXT_k_1)] = v_11;
                res_4 = res_3;

            }


        }


    }

    return res_1;

}
